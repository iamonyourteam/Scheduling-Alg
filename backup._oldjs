const timeInaDay = 8;
const maxDriveTime = 31;
let calendar = [
  [[], [], [], []],
  [[], [], [], []],
  [[], [], [], []],
  [[], [], [], []],
  [[], [], [], []],
];

let overflow = [];

console.log("hello world");
fetch("./jobs.json")
  .then((response) => response.json())
  .then((jobs) => {
    // console.table(jobs);

    fetch("./techs.json")
      .then((response) => response.json())
      .then((techs) => {
        // console.table(techs);
        function sleep(ms) {
          return new Promise((resolve) => setTimeout(resolve, ms));
        }
        async function schedualJob(job) {
          // Conditions
          function isSkilled(j) {
            return techs[j].skill_level >= job.skill_level;
          }
          function isTimeInDay(j, k, job) {
            if (calendar[k][j].length == 0) {
              return true;
            }

            let timeTotal = 0;
            calendar[k][j].forEach((element) => (timeTotal += element.time));
            if (timeTotal + job.time <= timeInaDay) {
              return true;
            }
          }
          function isDriveTime(j, k, job) {
            if (calendar[k][j].length == 0) {
              return true;
            }
            return true;
          }

          console.log(job);
          //loop over techs and days of week

          daysLoop: for (let k = 0; k < 5; k++) {
            //check prerequisites
            techsLoop: for (let j = 0; j < techs.length; j++) {
              if (isSkilled(j) && isTimeInDay(j, k, job)) {
                if (calendar[k][j].length == 0) {
                  calendar[k][j].push(job);
                  document.getElementById(`${k}${j}`).innerHTML =
                    JSON.stringify(calendar[k][j]);
                  await sleep(1000);

                  break daysLoop;
                }

                //check to see if job is close to another previous schedualed job
                else if (calendar[k][j].length != 0) {
                  if (
                    Math.abs(calendar[k][j][0].location - job.location) <= 15
                  ) {
                    calendar[k][j].push(job);

                    document.getElementById(`${k}${j}`).innerHTML =
                      JSON.stringify(calendar[k][j]);
                    await sleep(1000);

                    break daysLoop;
                  } else if (
                    Math.abs(calendar[k][j][0].location - job.location) <=
                    maxDriveTime
                  ) {
                    calendar[k][j].push(job);
                    await sleep(1000);

                    break daysLoop;
                  }
                }
              }
              //draw callendar
              document.getElementById(`${k}${j}`).innerHTML = JSON.stringify(
                calendar[k][j]
              );
            }
            //see if any extra jobs
            if (k == 4) {
              overflow.push(job);
            }
          }
        }

        for (let i = 0; i < jobs.length; i++) {
          schedualJob(jobs[i]);

          //   console.log(jobs[i]);
        }

        console.table(calendar);
        console.table(overflow);
      });
  });
